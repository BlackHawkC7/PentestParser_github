#include "resultsparta.h"

ResultSparta::ResultSparta()
{

}

void ResultSparta::toXmlFile()
{
    QFile file("outputSparta_" + QDateTime::currentDateTime().toString("yyyyMMddHHmmss") + ".xml");
    if(!file.open(QIODevice::WriteOnly)) {
        qInfo() << "ERROR: writing result file failed";
        return;
    }

    QXmlStreamWriter xmlStream(&file);

    xmlStream.setAutoFormatting(true);
    xmlStream.writeStartDocument();

    //sparta begin
    xmlStream.writeStartElement("sparta");

    //nmap begin
    xmlStream.writeStartElement("nmap");

    xmlStream.writeStartElement("nmapSessions");
    for(int i=0; i<nmapSessions.size(); i++) {
        nmapSession actualSession = nmapSessions.at(i);

        xmlStream.writeStartElement("session");
        xmlStream.writeAttribute("nmapVersion", actualSession.nmapVersion);
        xmlStream.writeAttribute("runArgs", actualSession.runArgs);
        xmlStream.writeAttribute("hosts", QString::number(actualSession.totalHosts));
        xmlStream.writeAttribute("startTime", actualSession.startTime);
        xmlStream.writeAttribute("finishTime", actualSession.finishTime);
        xmlStream.writeEndElement();
    }
    xmlStream.writeEndElement();

    xmlStream.writeStartElement("nmapResult");
    xmlStream.writeStartElement("hosts");
    QList<host> nmapHostList = resultNmap.getHostList();
    for(int i=0; i<nmapHostList.size(); i++) {
        host actualHost = nmapHostList.at(i);

        xmlStream.writeStartElement("host");
        xmlStream.writeAttribute("ipAddr", actualHost.ipAddress);
        xmlStream.writeAttribute("macAddr", actualHost.macAddress);
        xmlStream.writeAttribute("vendor", actualHost.vendor);
        xmlStream.writeAttribute("uptime", QString::number(actualHost.uptime));
        xmlStream.writeAttribute("networkDistance", QString::number(actualHost.networkDistance));

        xmlStream.writeStartElement("ports");
        for(int j=0; j<actualHost.portList.size(); j++) {
            port actualPort = actualHost.portList.at(j);
            xmlStream.writeStartElement("port");
            xmlStream.writeAttribute("id", QString::number(actualPort.number));
            xmlStream.writeAttribute("protocol", actualPort.protocol);
            xmlStream.writeAttribute("state", actualPort.state);
            xmlStream.writeAttribute("service", actualPort.service);
            xmlStream.writeAttribute("serviceName", actualPort.serviceName);
            xmlStream.writeAttribute("serviceVersion", actualPort.serviceVersion);
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        xmlStream.writeStartElement("os");
        for(int j=0; j<actualHost.osList.size(); j++) {
            os actualOs = actualHost.osList.at(j);
            xmlStream.writeStartElement("osMatch");
            xmlStream.writeAttribute("name", actualOs.name);
            xmlStream.writeAttribute("accuracy", QString::number(actualOs.accuracy));
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        //host end
        xmlStream.writeEndElement();
    }
    //hosts end
    xmlStream.writeEndElement();

    //nmapResults end
    xmlStream.writeEndElement();

    //nmap end
    xmlStream.writeEndElement();

    //nikto begin
    xmlStream.writeStartElement("nikto");

    for(int i=0; i<resultNikto.targetList.size(); i++) {
        target actualTarget = resultNikto.targetList.at(i);

        xmlStream.writeStartElement("target");
        xmlStream.writeAttribute("ipAddr", actualTarget.ipAddress);
        xmlStream.writeAttribute("port", QString::number(actualTarget.portNumber));

        for(int j=0; j<actualTarget.osvdbCodes.size(); j++) {
            osvdbCode actualCode = actualTarget.osvdbCodes.at(j);

            xmlStream.writeStartElement("osvdb");
            xmlStream.writeAttribute("code", QString::number(actualCode.number));
            xmlStream.writeAttribute("text", actualCode.text);
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();
    }

    //nikto end
    xmlStream.writeEndElement();

    //sparta end
    xmlStream.writeEndElement();

    file.close();
    qInfo() << "INFO: file saved: " << file.fileName();
}

void ResultSparta::toJsonFile()
{
    QFile file("outputSparta_" + QDateTime::currentDateTime().toString("yyyyMMddHHmmss") + ".json");
    if(!file.open(QIODevice::WriteOnly)) {
        qInfo() << "ERROR: writing result file failed";
        return;
    }

    QJsonObject rootObject;
    QJsonObject nmapObject;
    QJsonObject niktoObject;

    //nmap sessions
    QJsonArray nmapSessionsArray;
    for(int i=0; i<nmapSessions.size(); i++) {
        nmapSession actualSession = nmapSessions.at(i);

        QJsonObject sessionObject;
        sessionObject.insert("nmapVersion", actualSession.nmapVersion);
        sessionObject.insert("runArgs", actualSession.runArgs);
        sessionObject.insert("hosts", QString::number(actualSession.totalHosts));
        sessionObject.insert("startTime", actualSession.startTime);
        sessionObject.insert("finishTime", actualSession.finishTime);
        nmapSessionsArray.append(sessionObject);
    }
    nmapObject.insert("sessions", nmapSessionsArray);

    //nmap
    QJsonArray hostsArray;
    QList<host> nmapHostList = resultNmap.getHostList();
    for(int i=0; i<nmapHostList.size(); i++) {
        host actualHost = nmapHostList.at(i);

        QJsonObject hostObject;
        hostObject.insert("ipAddr", actualHost.ipAddress);
        hostObject.insert("macAddr", actualHost.macAddress);
        hostObject.insert("vendor", actualHost.vendor);
        hostObject.insert("uptime", QString::number(actualHost.uptime));
        hostObject.insert("networkDistance", QString::number(actualHost.networkDistance));

        QJsonArray portsArray;
        for(int j=0; j<actualHost.portList.size(); j++) {
            port actualPort = actualHost.portList.at(j);

            QJsonObject portObject;
            portObject.insert("id", QString::number(actualPort.number));
            portObject.insert("protocol", actualPort.protocol);
            portObject.insert("state", actualPort.state);
            portObject.insert("service", actualPort.service);
            portObject.insert("seviceName", actualPort.serviceName);
            portObject.insert("seviceVersion", actualPort.serviceVersion);
            portsArray.append(portObject);
        }
        hostObject.insert("ports", portsArray);

        QJsonArray osArray;
        for(int j=0; j<actualHost.osList.size(); j++) {
            os actualOs = actualHost.osList.at(j);

            QJsonObject osObject;
            osObject.insert("name", actualOs.name);
            osObject.insert("accuracy", QString::number(actualOs.accuracy));
            osArray.append(osObject);
        }
        hostObject.insert("os", osArray);

        hostsArray.append(hostObject);
    }
    nmapObject.insert("hosts", hostsArray);
    rootObject.insert("nmap", nmapObject);
    //todo kod
    //TODO podivat se na predchozi todo...


    //nikto
    QJsonArray targetsArray;
    for(int i=0; i<resultNikto.targetList.size(); i++) {
        target actualTarget = resultNikto.targetList.at(i);

        QJsonObject targetObject;
        targetObject.insert("ipAddr", actualTarget.ipAddress);
        targetObject.insert("port", QString::number(actualTarget.portNumber));

        QJsonArray osvdbArray;
        for(int j=0; j<actualTarget.osvdbCodes.size(); j++) {
            osvdbCode actualCode = actualTarget.osvdbCodes.at(j);

            QJsonObject osvdbObject;
            osvdbObject.insert("code", QString::number(actualCode.number));
            osvdbObject.insert("text", actualCode.text);
            osvdbArray.append(osvdbObject);
        }
        targetObject.insert("osvdb", osvdbArray);

        targetsArray.append(targetObject);
    }
    niktoObject.insert("targets", targetsArray);
    rootObject.insert("nikto", niktoObject);

    QJsonDocument jsonDocument(rootObject);
    file.write(jsonDocument.toJson());
    file.close();
    qInfo() << "INFO: file saved: " << file.fileName();
}

void ResultSparta::setNmapSessions(const QList<nmapSession> &value)
{
    nmapSessions = value;
}

void ResultSparta::setResultNmap(const ResultNmap &value)
{
    resultNmap = value;
}

void ResultSparta::setResultNikto(const ResultNikto &value)
{
    resultNikto = value;
}
