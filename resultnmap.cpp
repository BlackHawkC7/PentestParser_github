#include "resultnmap.h"

ResultNmap::ResultNmap()
{

}

void ResultNmap::toXmlFile()
{
    QFile file("outputNmap.xml");
    if(!file.open(QIODevice::WriteOnly)) return;

    QXmlStreamWriter xmlStream(&file);

    xmlStream.setAutoFormatting(true);
    xmlStream.writeStartDocument();

    xmlStream.writeStartElement("nmap");
    xmlStream.writeAttribute("startTime", QString::number(startTimestamp.toSecsSinceEpoch()));
    xmlStream.writeAttribute("stopTime", QString::number(stopTimestamp.toSecsSinceEpoch()));
    xmlStream.writeAttribute("duration", QString::number(testDuration));

    xmlStream.writeAttribute("version", nmapVersion);
    xmlStream.writeAttribute("args", runAttributes);
    xmlStream.writeAttribute("message", doneMessage);

    xmlStream.writeStartElement("hosts");
    for(int i=0; i<hostList.size(); i++) {
        host actualHost = hostList.at(i);
        xmlStream.writeStartElement("host");
        xmlStream.writeAttribute("ipAddr", actualHost.ipAddress);
        xmlStream.writeAttribute("macAddr", actualHost.macAddress);
        xmlStream.writeAttribute("vendor", actualHost.vendor);
        xmlStream.writeAttribute("uptime", QString::number(actualHost.uptime));
        xmlStream.writeAttribute("networkDistance", QString::number(actualHost.networkDistance));

        xmlStream.writeStartElement("ports");
        for(int j=0; j<actualHost.portList.size(); j++) {
            port actualPort = actualHost.portList.at(j);
            xmlStream.writeStartElement("port");
            xmlStream.writeAttribute("id", QString::number(actualPort.number));
            xmlStream.writeAttribute("protocol", actualPort.protocol);
            xmlStream.writeAttribute("state", actualPort.state);
            xmlStream.writeAttribute("service", actualPort.service);
            xmlStream.writeAttribute("serviceName", actualPort.serviceName);
            xmlStream.writeAttribute("serviceVersion", actualPort.serviceVersion);
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        xmlStream.writeStartElement("os");
        for(int j=0; j<actualHost.osList.size(); j++) {
            os actualOs = actualHost.osList.at(j);
            xmlStream.writeStartElement("osMatch");
            xmlStream.writeAttribute("name", actualOs.name);
            xmlStream.writeAttribute("accuracy", QString::number(actualOs.accuracy));
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        xmlStream.writeStartElement("trace");
        for(int j=0; j<actualHost.hopList.size(); j++) {
            hop actualHop = actualHost.hopList.at(j);
            xmlStream.writeStartElement("hop");
            xmlStream.writeAttribute("ipAddr", actualHop.ipAddress);
            xmlStream.writeAttribute("rtt", QString::number(actualHop.rtt));
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();
    }
    xmlStream.writeEndElement();

    xmlStream.writeEndDocument();
    file.close();
}

void ResultNmap::toJsonFile()
{
    QFile file("outputNmap.json");
    if(!file.open(QIODevice::WriteOnly)) return;

    QJsonObject rootObject;
    rootObject.insert("startTime", startTimestamp.toSecsSinceEpoch());
    rootObject.insert("stopTime", stopTimestamp.toSecsSinceEpoch());
    rootObject.insert("duration", testDuration);

    rootObject.insert("version", nmapVersion);
    rootObject.insert("args", runAttributes);
    rootObject.insert("message", doneMessage);

    QJsonArray hostsArray;
    for(int i=0; i<hostList.size(); i++) {
        host actualHost = hostList.at(i);

        QJsonObject hostObject;
        hostObject.insert("ipAddr", actualHost.ipAddress);
        hostObject.insert("macAddr", actualHost.macAddress);
        hostObject.insert("vendor", actualHost.vendor);
        hostObject.insert("uptime", QString::number(actualHost.uptime));
        hostObject.insert("networkDistance", QString::number(actualHost.networkDistance));

        QJsonArray portsArray;
        for(int j=0; j<actualHost.portList.size(); j++) {
            port actualPort = actualHost.portList.at(j);

            QJsonObject portObject;
            portObject.insert("id", QString::number(actualPort.number));
            portObject.insert("protocol", actualPort.protocol);
            portObject.insert("state", actualPort.state);
            portObject.insert("service", actualPort.service);
            portObject.insert("seviceName", actualPort.serviceName);
            portObject.insert("seviceVersion", actualPort.serviceVersion);
            portsArray.append(portObject);
        }
        hostObject.insert("ports", portsArray);

        QJsonArray osArray;
        for(int j=0; j<actualHost.osList.size(); j++) {
            os actualOs = actualHost.osList.at(j);

            QJsonObject osObject;
            osObject.insert("name", actualOs.name);
            osObject.insert("accuracy", QString::number(actualOs.accuracy));
            osArray.append(osObject);
        }
        hostObject.insert("os", osArray);

        QJsonArray hopsArray;
        for(int j=0; j<actualHost.hopList.size(); j++) {
            hop actualHop = actualHost.hopList.at(j);

            QJsonObject hopObject;
            hopObject.insert("ipAddr", actualHop.ipAddress);
            hopObject.insert("rtt", QString::number(actualHop.rtt));
            hopsArray.append(hopObject);
        }
        hostObject.insert("trace", hopsArray);


        hostsArray.append(hostObject);
    }
    rootObject.insert("hosts", hostsArray);

    QJsonDocument jsonDocument(rootObject);

    file.write(jsonDocument.toJson());
    file.close();
}
