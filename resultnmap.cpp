#include "resultnmap.h"

resultNmap::resultNmap()
{

}

void resultNmap::toXmlFile()
{

    QFile file("outputNmap.xml");
    if(!file.open(QIODevice::WriteOnly)) return;

    QXmlStreamWriter xmlStream(&file);

    xmlStream.setAutoFormatting(true);
    xmlStream.writeStartDocument();

    xmlStream.writeStartElement("nmap");
    xmlStream.writeAttribute("startTime", QString::number(startTimestamp.toSecsSinceEpoch()));
    xmlStream.writeAttribute("stopTime", QString::number(stopTimestamp.toSecsSinceEpoch()));
    xmlStream.writeAttribute("duration", QString::number(testDuration));

    xmlStream.writeAttribute("version", nmapVersion);
    xmlStream.writeAttribute("args", runAttributes);
    xmlStream.writeAttribute("message", doneMessage);

    xmlStream.writeStartElement("hosts");
    for(int i=0; i<hostList.size(); i++) {
        host actualHost = hostList.at(i);
        xmlStream.writeStartElement("host");
        xmlStream.writeAttribute("ipAddr", actualHost.ipAddress);
        xmlStream.writeAttribute("uptime", QString::number(actualHost.uptime));
        xmlStream.writeAttribute("networkDistance", QString::number(actualHost.networkDistance));

        xmlStream.writeStartElement("ports");
        for(int j=0; j<actualHost.portList.size(); j++) {
            port actualPort = actualHost.portList.at(j);
            xmlStream.writeStartElement("port");
            xmlStream.writeAttribute("id", QString::number(actualPort.number));
            xmlStream.writeAttribute("state", actualPort.state);
            xmlStream.writeAttribute("service", actualPort.service);
            xmlStream.writeAttribute("serviceName", actualPort.serviceName);
            xmlStream.writeAttribute("serviceVersion", actualPort.serviceVersion);
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        xmlStream.writeStartElement("os");
        for(int j=0; j<actualHost.osList.size(); j++) {
            os actualOs = actualHost.osList.at(j);
            xmlStream.writeStartElement("osMatch");
            xmlStream.writeAttribute("name", actualOs.name);
            xmlStream.writeAttribute("accuracy", QString::number(actualOs.accuracy));
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();

        xmlStream.writeStartElement("trace");
        for(int j=0; j<actualHost.hopList.size(); j++) {
            hop actualHop = actualHost.hopList.at(j);
            xmlStream.writeStartElement("hop");
            xmlStream.writeAttribute("ipAddr", actualHop.ipAddress);
            xmlStream.writeAttribute("rtt", QString::number(actualHop.rtt));
            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();
    }
    xmlStream.writeEndElement();

    xmlStream.writeEndDocument();
    file.close();
}
