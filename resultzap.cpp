#include "resultzap.h"

ResultZap::ResultZap()
{

}

void ResultZap::toXmlFile()
{
    QFile file("outputZap.xml");
    if(!file.open(QIODevice::WriteOnly)) return;

    QXmlStreamWriter xmlStream(&file);

    xmlStream.setAutoFormatting(true);
    xmlStream.writeStartDocument();

    xmlStream.writeStartElement("zap");
    xmlStream.writeAttribute("generated", date);

    xmlStream.writeStartElement("summary");
    xmlStream.writeAttribute("informational", QString::number(summary.informational));
    xmlStream.writeAttribute("low", QString::number(summary.low));
    xmlStream.writeAttribute("medium", QString::number(summary.medium));
    xmlStream.writeAttribute("high", QString::number(summary.high));
    xmlStream.writeEndElement();

    xmlStream.writeStartElement("sites");

    qDebug() << "size: " << siteList.size();
    for(int i=0; i<siteList.size(); i++) {
        site actualSite = siteList.at(i);

        xmlStream.writeStartElement("site");
        xmlStream.writeAttribute("url", actualSite.url);
        xmlStream.writeAttribute("host", actualSite.host);
        xmlStream.writeAttribute("port", QString::number(actualSite.port));

        xmlStream.writeStartElement("alerts");
        for(int j=0; j<actualSite.alertList.size(); j++) {
            alert actualAlert = actualSite.alertList.at(j);

            xmlStream.writeStartElement("alert");
            xmlStream.writeAttribute("name", actualAlert.name);
            xmlStream.writeAttribute("risk", actualAlert.risk);
            xmlStream.writeAttribute("riskcode", QString::number(actualAlert.riskCode));
            xmlStream.writeAttribute("cweid", QString::number(actualAlert.cweId));
            xmlStream.writeAttribute("parameter", actualAlert.parameter);

            xmlStream.writeTextElement("description", actualAlert.description);
            xmlStream.writeTextElement("solution", actualAlert.solution);
            xmlStream.writeTextElement("reference", actualAlert.reference);

            xmlStream.writeEndElement();
        }
        xmlStream.writeEndElement();
        xmlStream.writeEndElement();
    }
    xmlStream.writeEndElement();

    xmlStream.writeEndDocument();
    file.close();
}

void ResultZap::toJsonFile()
{
    QFile file("outputZap.json");
    if(!file.open(QIODevice::WriteOnly)) return;

    QJsonObject rootObject;
    rootObject.insert("generated", date);

    rootObject.insert("summary",
                      QJsonObject {
                          {"informational", QString::number(summary.informational)},
                          {"low", QString::number(summary.low)},
                          {"medium", QString::number(summary.medium)},
                          {"high", QString::number(summary.high)}
                      });

    QJsonArray sitesArray;
    for(int i=0; i<siteList.size(); i++) {
        site actualSite = siteList.at(i);

        QJsonObject siteObject;
        siteObject.insert("url", actualSite.url);
        siteObject.insert("host", actualSite.host);
        siteObject.insert("port", QString::number(actualSite.port));

        QJsonArray alertArray;
        for(int j=0; j<actualSite.alertList.size(); j++) {
            alert actualAlert = actualSite.alertList.at(j);

            QJsonObject alertObject;
            alertObject.insert("name", actualAlert.name);
            alertObject.insert("risk", actualAlert.risk);
            alertObject.insert("riskcode", QString::number(actualAlert.riskCode));
            alertObject.insert("cweid", QString::number(actualAlert.cweId));
            alertObject.insert("parameter", actualAlert.parameter);
            alertObject.insert("description", actualAlert.description);
            alertObject.insert("solution", actualAlert.solution);
            alertObject.insert("reference", actualAlert.reference);

            alertArray.append(alertObject);
        }
        siteObject.insert("alerts", alertArray);

        sitesArray.append(siteObject);
    }
    rootObject.insert("sites", sitesArray);


    QJsonDocument jsonDocument(rootObject);

    file.write(jsonDocument.toJson());
    file.close();
}
