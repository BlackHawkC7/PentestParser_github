#include "pentoolnmap.h"

PenToolNmap::PenToolNmap()
{
    connect(&process, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(processFinished(int, QProcess::ExitStatus)));
    connect(&process, SIGNAL(stateChanged(QProcess::ProcessState)), this, SLOT(processStatusChanged(QProcess::ProcessState)));
    //connect(&process, SIGNAL(readyReadStandardOutput()), this, SLOT(processReadyToRead()));
    connect(&process, SIGNAL(errorOccurred(QProcess::ProcessError)), this, SLOT(processError(QProcess::ProcessError)));

    //connect(&this->process, &QProcess::finished(int, QProcess::ExitStatus), this, &PenToolNmap::processFinished(int, QProcess::ExitStatus));
    //connect(&this->process, &QProcess::stateChanged, this, &PenToolNmap::processStatusChanged);
    //connect(&process, static_cast<void(QProcess::*)(int, QProcess::ExitStatus)>(QProcess::finished), this, &PenToolNmap::processFinished);
}

void PenToolNmap::parse()
{
    QStringList resultList = this->resultString.split(QRegExp("[\r\n]"), QString::SkipEmptyParts);

    qDebug() << "result size: " << resultList.size();
    int numberOfPorts = 0;
    //scanned ports results
    int portStartIndex = resultList.indexOf(QRegExp("*PORT*", Qt::CaseSensitive, QRegExp::Wildcard), 0);
    if(portStartIndex > 0) {
        for(int i=portStartIndex; i<resultList.size(); i++) {
            int portIndex = resultList.indexOf(QRegExp("^[0-9].+"), i);
            if(portIndex > 0) {
                numberOfPorts++;
                QString portLine = resultList[portIndex];
                QStringList words = portLine.split(QRegExp("[\r\n\t ]+"), QString::SkipEmptyParts);
                int banan = 0;
                /*
                for(int j=0; j<words.size(); j++) {

                }
                */
                i=portIndex;
            }
        }
    }
    qDebug() << "number of reachable ports: " << numberOfPorts;
}

void PenToolNmap::run()
{
    //nmap [ <Scan Type> ...] [ <Options> ] { <target specification> }

    QString scanType = " -A";
    QString options = " -p 1-100";
    QString targetSpecification = " 192.168.1.1";

    QString nmapDirectory = QCoreApplication::applicationDirPath()+"/nmap/";


    //this->process.setWorkingDirectory(nmapDirectory);


    qDebug() << "directory: " << nmapDirectory;
    qDebug() << "work dir:  " << process.workingDirectory();

    QFileInfo checkFile(nmapDirectory + "7za.exe");
    qDebug() << "exist: " << checkFile.exists();

    //process.setWorkingDirectory()
    qDebug() << "starting nmap...";

    this->process.start(nmapDirectory + "nmap.exe" + scanType + options + targetSpecification);

    //this->process.waitForStarted();
    //this->process.waitForFinished();

    //process.execute("nmap.exe");
    qDebug() << "end..";
}


void PenToolNmap::processReadyToRead()
{
    qDebug() << "ready to read";
    QStringList result;
    result << this->process.readAllStandardOutput();

    qDebug() << result;
}

void PenToolNmap::processStatusChanged(QProcess::ProcessState state)
{
    qDebug() << "status changed: " << state;
}

void PenToolNmap::processFinished(int exitCode, QProcess::ExitStatus exitStatus)
{
    qDebug() << "finished";
    qDebug() << "\tCode: " << exitCode;
    qDebug() << "\tStatus: " << exitStatus;
    qDebug() << "\n\n\n\n\n";

    this->resultString = this->process.readAllStandardOutput();
    this->parse();
}

void PenToolNmap::processError(QProcess::ProcessError error)
{
    qDebug() << "ERROR !!!   " << error;
    qDebug() << "\t" << this->process.errorString();
}
