#include "pentoolsparta.h"

PenToolSparta::PenToolSparta()
{

}

PenToolSparta::PenToolSparta(QString filePath)
{
    /*
    QFile f(filePath);
    if(!f.open(QIODevice::ReadOnly)) {
        qDebug() << "error loading file";
    }
    //this->dbFile.setContent(&f);
    f.close();
    */

    db = QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName(filePath);

    if(!db.open()) {
        qInfo() << "error connecting with database";
    }
}

void PenToolSparta::parse()
{
    QStringList tablesList = db.tables();
    QStringList tablesContentList;

    //list of non-empty tables
    QSqlQuery query;
    for(int i=0; i<tablesList.size(); i++) {
        QString actualTable = tablesList.at(i);

        query.exec("SELECT COUNT(*) FROM " + actualTable);
        query.first();
        int numberOfRows = query.value(0).toInt();
        if(numberOfRows > 0) tablesContentList.append(actualTable);
    }
    query.finish();


    //nmap sessions
    if(tablesContentList.contains("db_tables_nmap_session")) {
        QSqlQuery nmapSessionQuery;
        nmapSessionQuery.exec("SELECT * FROM 'db_tables_nmap_session'");

        QList<nmapSession> sessionList;
        while(nmapSessionQuery.next()) {
            nmapSession newSession;

            newSession.nmapVersion = nmapSessionQuery.value(4).toString();
            newSession.runArgs = nmapSessionQuery.value(5).toString();
            newSession.startTime = nmapSessionQuery.value(2).toString();
            newSession.finishTime = nmapSessionQuery.value(3).toString();
            newSession.totalHosts = nmapSessionQuery.value(6).toUInt();

            sessionList.append(newSession);
        }
        nmapSessionQuery.finish();
        result.nmapSessions = sessionList;
    }

    //nmap
    if(tablesContentList.contains("db_tables_nmap_host")) {

        QSqlQuery hostQuery;
        hostQuery.exec("SELECT * FROM 'db_tables_nmap_host'");

        QList<host> hostList;
        while(hostQuery.next()) {
            host newHost;
            uint hostId = hostQuery.value(0).toUInt();

            newHost.uptime = hostQuery.value(11).toUInt();
            newHost.ipAddress = hostQuery.value(4).toString();
            newHost.macAddress = hostQuery.value(7).toString();
            newHost.vendor = hostQuery.value(10).toString();
            newHost.networkDistance = hostQuery.value(13).toInt();

            if(tablesContentList.contains("db_tables_nmap_port")) {
                QSqlQuery portQuery;
                portQuery.exec("SELECT * FROM 'db_tables_nmap_port' WHERE host_id = " + QString::number(hostId) + " AND state != \"closed\"");
                QList<port> portList;
                while(portQuery.next()) {
                    port newPort;
                    uint serviceId = portQuery.value(5).toUInt();

                    newPort.number = portQuery.value(1).toUInt();
                    newPort.protocol = portQuery.value(2).toString();
                    newPort.state = portQuery.value(3).toString();

                    if(tablesContentList.contains("db_tables_nmap_service")) {
                        QSqlQuery serviceQuery;
                        serviceQuery.exec("SELECT * FROM 'db_tables_nmap_service' WHERE id = " + QString::number(serviceId));
                        if(serviceQuery.first()) {
                            newPort.service = serviceQuery.value(2).toString();
                            newPort.serviceName = serviceQuery.value(1).toString();
                            newPort.serviceVersion = serviceQuery.value(3).toString();
                        }
                        serviceQuery.finish();
                    }
                    portList.append(newPort);
                }
                portQuery.finish();

                newHost.portList = portList;
            }

            if(tablesContentList.contains("db_tables_nmap_os")) {
                QSqlQuery osQuery;
                osQuery.exec("SELECT * FROM 'db_tables_nmap_os' WHERE host_id = " + QString::number(hostId) + " AND name != \"\"");
                QList<os> osList;
                while(osQuery.next()) {
                    os newOs;

                    newOs.name = osQuery.value(1).toString();
                    newOs.accuracy = osQuery.value(6).toUInt();

                    osList.append(newOs);
                }
                osQuery.finish();

                newHost.osList = osList;
            }

            hostList.append(newHost);
        }
        hostQuery.finish();

        result.resultNmap.hostList = hostList;
    }

    db.close();

    result.toXmlFile();
    result.toJsonFile();
}
