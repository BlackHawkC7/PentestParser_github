#include "pentoolsparta.h"

PenToolSparta::PenToolSparta(QString filePath)
{
    db = QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName(filePath);

    if(!db.open()) {
        qInfo() << "ERROR: opening database failed";
    }
}

void PenToolSparta::parse(QString resultFileFormat)
{
    if(!db.isOpen()) return;
    QStringList tablesList = db.tables();
    QStringList tablesContentList;

    //list of non-empty tables
    QSqlQuery query;
    for(int i=0; i<tablesList.size(); i++) {
        QString actualTable = tablesList.at(i);

        query.exec("SELECT COUNT(*) FROM " + actualTable);
        query.first();
        int numberOfRows = query.value(0).toInt();
        if(numberOfRows > 0) tablesContentList.append(actualTable);
    }
    query.finish();


    //nmap sessions
    if(tablesContentList.contains("db_tables_nmap_session")) {
        QSqlQuery nmapSessionQuery;
        nmapSessionQuery.exec("SELECT * FROM 'db_tables_nmap_session'");

        QList<nmapSession> sessionList;
        while(nmapSessionQuery.next()) {
            nmapSession newSession;

            newSession.nmapVersion = nmapSessionQuery.value(4).toString();
            newSession.runArgs = nmapSessionQuery.value(5).toString();
            newSession.startTime = nmapSessionQuery.value(2).toString();
            newSession.finishTime = nmapSessionQuery.value(3).toString();
            newSession.totalHosts = nmapSessionQuery.value(6).toUInt();

            sessionList.append(newSession);
        }
        nmapSessionQuery.finish();
        result.setNmapSessions(sessionList);
    }

    //nmap
    if(tablesContentList.contains("db_tables_nmap_host")) {

        QSqlQuery hostQuery;
        hostQuery.exec("SELECT * FROM 'db_tables_nmap_host'");

        QList<host> hostList;
        while(hostQuery.next()) {
            host newHost;
            uint hostId = hostQuery.value(0).toUInt();

            newHost.uptime = hostQuery.value(11).toUInt();
            newHost.ipAddress = hostQuery.value(4).toString();
            newHost.macAddress = hostQuery.value(7).toString();
            newHost.vendor = hostQuery.value(10).toString();
            newHost.networkDistance = hostQuery.value(13).toInt();

            if(tablesContentList.contains("db_tables_nmap_port")) {
                QSqlQuery portQuery;
                portQuery.exec("SELECT * FROM 'db_tables_nmap_port' WHERE host_id = " + QString::number(hostId) + " AND state != \"closed\"");
                QList<port> portList;
                while(portQuery.next()) {
                    port newPort;
                    uint serviceId = portQuery.value(5).toUInt();

                    newPort.number = portQuery.value(1).toUInt();
                    newPort.protocol = portQuery.value(2).toString();
                    newPort.state = portQuery.value(3).toString();

                    if(tablesContentList.contains("db_tables_nmap_service")) {
                        QSqlQuery serviceQuery;
                        serviceQuery.exec("SELECT * FROM 'db_tables_nmap_service' WHERE id = " + QString::number(serviceId));
                        if(serviceQuery.first()) {
                            newPort.service = serviceQuery.value(2).toString();
                            newPort.serviceName = serviceQuery.value(1).toString();
                            newPort.serviceVersion = serviceQuery.value(3).toString();
                        }
                        serviceQuery.finish();
                    }
                    portList.append(newPort);
                }
                portQuery.finish();

                newHost.portList = portList;
            }

            if(tablesContentList.contains("db_tables_nmap_os")) {
                QSqlQuery osQuery;
                osQuery.exec("SELECT * FROM 'db_tables_nmap_os' WHERE host_id = " + QString::number(hostId) + " AND name != \"\"");
                QList<os> osList;
                while(osQuery.next()) {
                    os newOs;

                    newOs.name = osQuery.value(1).toString();
                    newOs.accuracy = osQuery.value(6).toUInt();

                    osList.append(newOs);
                }
                osQuery.finish();

                newHost.osList = osList;
            }

            hostList.append(newHost);
        }
        hostQuery.finish();

        ResultNmap nmapResult;
        nmapResult.setHostList(hostList);

        result.setResultNmap(nmapResult);
    }

    //nikto process ids
    QList<uint> idList;
    if(tablesContentList.contains("db_tables_process")) {
        QSqlQuery idQuery;
        idQuery.exec("SELECT id FROM 'db_tables_process' WHERE name = \"nikto\"");
        while(idQuery.next()) {
            idList.append(idQuery.value(0).toUInt());
        }
    }

    //nikto
    if(tablesContentList.contains("db_tables_process_output") && !idList.isEmpty()) {
        QList<target> targetList;

        for(int i=0; i<idList.size(); i++) {
            QSqlQuery processOutputQuery;
            processOutputQuery.exec("SELECT output FROM 'db_tables_process_output' WHERE id = " + QString::number(idList.at(i)));

            target newTarget;
            QList<osvdbCode> osvdbCodeList;

            while(processOutputQuery.next()) {
                QString actualData = processOutputQuery.value(0).toString();
                QTextStream dataStream(&actualData);

                while(!dataStream.atEnd()) {
                    QString actualLine = dataStream.readLine();
                    //search for target ip
                    if(actualLine.contains("Target IP")) {
                        QRegularExpression regexIp("Target IP:\\s*(.+)");
                        QRegularExpressionMatch regexIpMatch = regexIp.match(actualLine);

                        if(regexIpMatch.hasMatch()) {
                            newTarget.ipAddress = regexIpMatch.captured(1);
                        }
                    }

                    //search for target port
                    if(actualLine.contains("Target Port")) {
                        QRegularExpression regexPort("Target Port:\\s*(.+)");
                        QRegularExpressionMatch regexPortMatch = regexPort.match(actualLine);

                        if(regexPortMatch.hasMatch()) {
                            newTarget.portNumber = regexPortMatch.captured(1).toUInt();
                        }
                    }

                    //search for osvdb line
                    if(actualLine.contains("OSVDB")) {
                        QRegularExpression regexLine("OSVDB-(\\d*):\\s*(.+)");
                        QRegularExpressionMatch regexLineMatch = regexLine.match(actualLine);

                        if(regexLineMatch.hasMatch()) {
                            osvdbCode newCode;
                            newCode.number = regexLineMatch.captured(1).toUInt();
                            newCode.text = regexLineMatch.captured(2);
                            osvdbCodeList.append(newCode);
                        }
                    }
                }
            }
            newTarget.osvdbCodes = osvdbCodeList;
            targetList.append(newTarget);

            processOutputQuery.finish();
        }

        ResultNikto niktoResult;
        niktoResult.targetList = targetList;
        result.setResultNikto(niktoResult);
    }
    db.close();

    if(resultFileFormat == "xml")
        result.toXmlFile();
    else if(resultFileFormat == "json")
        result.toJsonFile();
}
