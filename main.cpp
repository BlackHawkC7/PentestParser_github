#include <QCoreApplication>
#include <QDebug>
#include <QProcess>
#include <QCommandLineOption>
#include <QCommandLineParser>

#include "pentoolnmap.h"
#include "pentoolzap.h"
#include "pentoolsparta.h"
#include "pentoolconfig.h"

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setApplicationName("PentestParser");
    QCoreApplication::setApplicationVersion("1.00");

    QCommandLineParser cliParser;
    cliParser.addHelpOption();
    cliParser.addVersionOption();
    cliParser.setApplicationDescription("Application for parsing pentest tools outputs.\n"
                                        "First you must select operation which you want to use, parse or run.\n"
                                        "Then you must select pentest tool.");

    QCommandLineOption runOption(QStringList() << "r" << "run","runs selected tool a generate output");
    QCommandLineOption parseOption(QStringList() << "p" << "parse", "parse selected tool file");

    QCommandLineOption nmapOption("nmap", "selects nMap tool, supported functions: run, parse");
    QCommandLineOption zapOption("zap", "selects ZAP tool, supported funtions: parse");
    QCommandLineOption spartaOption("sparta", "selects Sparta tool, supported funtions: parse");

    QCommandLineOption inputFileOption(QStringList() << "i" << "input-file", "sets the input file path", "file");
    QCommandLineOption xmlOption(QStringList() << "X" << "xml", "sets XML as output format");
    QCommandLineOption jsonOption(QStringList() << "J" << "json", "sets JSON as output format");

    cliParser.addOptions({runOption, parseOption});
    cliParser.addOptions({inputFileOption ,xmlOption, jsonOption});
    cliParser.addOptions({nmapOption, zapOption, spartaOption});
    cliParser.process(app);


    if(app.arguments().size() <= 1) {
        qInfo() << "ERROR: wrong usage of appliaction";
        cliParser.showHelp();
    }


    QString outputFileFormat;
    if(cliParser.isSet(xmlOption))
        outputFileFormat = "xml";
    else if(cliParser.isSet(jsonOption))
        outputFileFormat = "json";
    else {
        qInfo() << "ERROR: no output file format selected";
        cliParser.showHelp();
    }


    if(cliParser.isSet(runOption)) {
        //run
        QFile file("config.ini");
        if(!file.exists()) {
            qInfo() << "ERROR: missing config file - config.ini";
            cliParser.showHelp();
        }

        penToolConfig config("config.ini");
        if(cliParser.isSet(nmapOption)) {
            PenToolNmap nmap;
            nmap.run(config.getNmapFolderPath(), config.getNmapArguments());
            nmap.parse(outputFileFormat);
            return 0;
        }
        else {
            qInfo() << "ERROR: wrong run parameters";
            cliParser.showHelp();
        }
    }
    else if(cliParser.isSet(parseOption)) {
        //parse
        if(!cliParser.isSet(inputFileOption)) {
            qInfo() << "ERROR: no input file";
            cliParser.showHelp();
        }

        if(cliParser.isSet(nmapOption)) {
            //nmap
            PenToolNmap nmap(cliParser.value(inputFileOption));
            nmap.parse(outputFileFormat);
            return 0;
        }
        else if(cliParser.isSet(zapOption)) {
            //zap
            PenToolZap zap(cliParser.value(inputFileOption));
            zap.parse(outputFileFormat);
            return 0;
        }
        else if(cliParser.isSet(spartaOption)) {
            //sparta
            PenToolSparta sparta(cliParser.value(inputFileOption));
            sparta.parse(outputFileFormat);
            return 0;
        }
        else {
            qInfo() << "ERROR: wrong parse parameters";
            cliParser.showHelp();
        }
    }
    else cliParser.showHelp();
}
