#include <QCoreApplication>
#include <QDebug>
#include <QProcess>
#include <QCommandLineOption>
#include <QCommandLineParser>

#include "pentoolnmap.h"
#include "pentoolzap.h"
#include "pentoolsparta.h"

#include "pentoolconfig.h"

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setApplicationName("PentestParses");
    QCoreApplication::setApplicationVersion("0.8");

    QCommandLineParser cliParser;
    cliParser.addHelpOption();
    cliParser.addVersionOption();
    cliParser.setApplicationDescription("Application for parsing pentest tools outputs.\n"
                                        "First you must select operation which you want to use, parse or run.\n"
                                        "Then you must select pentest tool.");

    QCommandLineOption runOption(QStringList() << "r" << "run","runs selected tool a generate output");
    QCommandLineOption parseOption(QStringList() << "p" << "parse", "parse selected tool file");

    QCommandLineOption nmapOption("nmap", "selects nMap tool, supported functions: run, parse");
    QCommandLineOption zapOption("zap", "selects ZAP tool, supported funtions: parse");
    QCommandLineOption spartaOption("sparta", "selects Sparta tool, supported funtions: parse");

    QCommandLineOption inputFileOption(QStringList() << "i" << "input-file", "sets the input file path, only for parsing", "file");
    QCommandLineOption outputFileOption(QStringList() << "o" << "output-file", "sets the output file path, optionally", "file");

    QCommandLineOption xmlOption(QStringList() << "X" << "xml", "sets XML as output format");
    QCommandLineOption jsonOption(QStringList() << "J" << "json", "sets JSON as output format");


    cliParser.addOptions({runOption, parseOption});
    cliParser.addOptions({inputFileOption, outputFileOption});
    cliParser.addOptions({xmlOption, jsonOption});
    cliParser.addOptions({nmapOption, zapOption, spartaOption});
    cliParser.process(app);

    if(cliParser.isSet(runOption)) {
        //run
        if(cliParser.isSet(nmapOption)) {
            //TODO - nmap run
        }
        else cliParser.showHelp();
    }

    else if(cliParser.isSet(parseOption)) {
        //parse
        if(cliParser.isSet(nmapOption)) {
            //nmap
            if(!cliParser.isSet(inputFileOption)) {
                qInfo() << "NO INPUT FILE !!!";
                cliParser.showHelp();
            }
            if(cliParser.isSet(outputFileOption)) {
                //TODO - nový konstruktor pro output file
                PenToolNmap nmap(cliParser.value(inputFileOption));
                nmap.parse();
                return 0;
            }
            else {
                PenToolNmap nmap(cliParser.value(inputFileOption));
                nmap.parse();
                return 0;
            }
        }
        else if(cliParser.isSet(zapOption)) {
            //zap
            if(!cliParser.isSet(inputFileOption)) {
                qInfo() << "NO INPUT FILE !!!";
                cliParser.showHelp();
            }
            if(cliParser.isSet(outputFileOption)) {
                //TODO - nový konstruktor pro output file
                PenToolZap zap(cliParser.value(inputFileOption));
                zap.parse();
                return 0;
            }
            else {
                PenToolZap zap(cliParser.value(inputFileOption));
                zap.parse();
                return 0;
            }
        }
        else if(cliParser.isSet(spartaOption)) {
            //sparta
            if(!cliParser.isSet(inputFileOption)) {
                qInfo() << "NO INPUT FILE !!!";
                cliParser.showHelp();
            }
            if(cliParser.isSet(outputFileOption)) {
                //TODO - nový konstruktor pro output file
                PenToolSparta sparta(cliParser.value(inputFileOption));
                sparta.parse();
                return 0;
            }
            else {
                PenToolSparta sparta(cliParser.value(inputFileOption));
                sparta.parse();
                return 0;
            }
        }
        else cliParser.showHelp();
    }
    else cliParser.showHelp();

    /*
    if(cliParser.isSet(nmapOption)) {
        //nmap
        qInfo() << "nmap";
    }
    else if(cliParser.isSet(zapOption)) {
        //sqlmap
        qInfo() << "zap";
    }
    else if(cliParser.isSet(spartaOption)) {
        qInfo() << "sparta";
    }
    else {
        qInfo() << "Wrong usage of run arguments !!!";
        cliParser.showHelp();
    }*/

    //PenToolNmap nmap("testSCAN.xml");


    //PenToolNmap nmap("result.xml");


    //nmap.parse();

    /*
    penToolConfig ptConfig("configTest.ini");

    PenToolNmap nmapTestConfig;
    nmapTestConfig.run(ptConfig.getNmapArguments());
*/


    //zap testing
    /*
    PenToolZap zaptool("report.xml");
    zaptool.parse();*/

    //sparta testing
    /*
    PenToolSparta spartaTool("target01.sprt");
    spartaTool.parse();
*/
    //cliParser.showHelp();
    //qInfo() << "App end...";
    //return a.exec();
}
